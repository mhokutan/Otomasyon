name: yt-auto-story
on:
  workflow_dispatch:
  schedule:
    - cron: "0 */8 * * *"

jobs:
  publish-story:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        include:
          - lang: en
            region: US
            title_prefix: "Mystery Story:"
          - lang: tr
            region: TR
            title_prefix: "Gizemli Hikaye:"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg fonts-dejavu-core
          python -m pip install --upgrade pip
          pip install google-api-python-client google-auth google-auth-oauthlib requests

      - name: Preflight keys
        id: gates
        env:
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
        run: |
          set -euo pipefail
          has_yt=false
          if [ -n "${YT_CLIENT_ID:-}" ] && [ -n "${YT_CLIENT_SECRET:-}" ] && [ -n "${YT_REFRESH_TOKEN:-}" ]; then
            has_yt=true
          else
            echo "::warning::YouTube secrets missing; upload skipped"
          fi
          echo "has_yt=$has_yt" >> "$GITHUB_OUTPUT"

      - name: Build video (STORY • ${{ matrix.lang }})
        id: build
        env:
          LANGUAGE: ${{ matrix.lang }}
          REGION: ${{ matrix.region }}
          TITLE_PREFIX: ${{ matrix.title_prefix }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || vars.OPENAI_API_KEY }}
        run: |
          set -euo pipefail
          mkdir -p out
          echo "== RUN =="
          python -X dev -u -m src.main 2>&1 | tee out/run_${{ matrix.lang }}.log || true
          echo "== OUT =="
          ls -lah out || true
          latest="$(ls -t out/*.mp4 2>/dev/null | head -n1 || true)"
          if [ -z "$latest" ]; then
            echo "::error::No mp4 produced"; exit 1
          fi
          echo "Video: $latest"
          if ! ffprobe -v error -select_streams a -show_entries stream=codec_name -of csv=p=0 "$latest" | grep -q .; then
            echo "::error::No audio stream in video"; exit 1
          fi
          echo "video_path=$latest" >> "$GITHUB_OUTPUT"

      - name: Auth smoke test
        if: ${{ steps.gates.outputs.has_yt == 'true' }}
        env:
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
        run: |
          python - <<'PY'
          import os
          import google.auth.transport.requests
          from google.oauth2.credentials import Credentials
          creds = Credentials(
            None,
            refresh_token=os.environ["YT_REFRESH_TOKEN"],
            client_id=os.environ["YT_CLIENT_ID"],
            client_secret=os.environ["YT_CLIENT_SECRET"],
            token_uri="https://oauth2.googleapis.com/token"
          )
          creds.refresh(google.auth.transport.requests.Request())
          print("Auth OK")
          PY

      - name: Generate SEO metadata
        id: seo
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || vars.OPENAI_API_KEY }}
          OPENAI_BASE_URL: ${{ vars.OPENAI_BASE_URL || 'https://api.openai.com/v1' }}
          OPENAI_MODEL_CHAT: ${{ vars.OPENAI_MODEL_CHAT || 'gpt-4o-mini' }}
          LANGUAGE: ${{ matrix.lang }}
          REGION: ${{ matrix.region }}
          TITLE_PREFIX: ${{ matrix.title_prefix }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, re, json, requests, datetime, pathlib
          out_dir = pathlib.Path("out"); out_dir.mkdir(exist_ok=True)
          def clean(s): return re.sub(r'\s+', ' ', s or '').strip()

          lang = os.getenv("LANGUAGE","en")
          region = os.getenv("REGION","US")
          prefix = os.getenv("TITLE_PREFIX","")
          today = datetime.datetime.utcnow().strftime("%Y-%m-%d")

          prompt = f"""
          You are an expert YouTube SEO copywriter.
          Language: {lang}
          Region: {region}
          Date: {today}
          Theme: story
          Generate JSON with: title, description, tags
          Title <= 90 chars, catchy but not clickbait, start with "{prefix}".
          Description: 2 short paragraphs + 3 bullet points + CTA + 8-12 hashtags.
          Tags: 12-18 comma separated keywords.
          """

          url = os.getenv("OPENAI_BASE_URL","https://api.openai.com/v1").rstrip('/') + "/chat/completions"
          headers = {"Authorization": f"Bearer {os.environ['OPENAI_API_KEY']}", "Content-Type": "application/json"}
          data = {"model": os.getenv("OPENAI_MODEL_CHAT","gpt-4o-mini"),
                  "messages":[{"role":"user","content":prompt}],
                  "temperature":0.7,"max_tokens":400}
          r = requests.post(url, headers=headers, json=data, timeout=60)
          r.raise_for_status()
          text = r.json()["choices"][0]["message"]["content"]
          try: meta = json.loads(text)
          except: meta = {"title":"","description":"","tags":""}

          title = clean(meta.get("title") or f"{prefix} Auto Story {today}")
          desc = meta.get("description") or f"Lang={lang}, Region={region} Auto {today}"
          tags = clean(meta.get("tags") or "shorts,story,ai,automation")

          (out_dir/"title.txt").write_text(title,encoding="utf-8")
          (out_dir/"desc.txt").write_text(desc,encoding="utf-8")
          (out_dir/"tags.txt").write_text(tags,encoding="utf-8")
          PY

          title=$(cat out/title.txt | sed 's/%/%25/g;s/\r/%0D/g;s/\n/%0A/g')
          desc=$(cat out/desc.txt | sed 's/%/%25/g;s/\r/%0D/g;s/\n/%0A/g')
          tags=$(cat out/tags.txt | sed 's/%/%25/g;s/\r/%0D/g;s/\n/%0A/g')
          echo "title=$title" >> $GITHUB_OUTPUT
          echo "description=$desc" >> $GITHUB_OUTPUT
          echo "tags_csv=$tags" >> $GITHUB_OUTPUT

      - name: Upload to YouTube
        if: ${{ steps.gates.outputs.has_yt == 'true' }}
        env:
          VIDEO_PATH: ${{ steps.build.outputs.video_path }}
          TITLE: ${{ steps.seo.outputs.title }}
          DESC: ${{ steps.seo.outputs.description }}
          TAGS: ${{ steps.seo.outputs.tags_csv }}
          FALLBACK_TITLE: ${{ matrix.title_prefix }} ${{ matrix.lang == 'tr' && 'Günlük Hikaye' || 'Daily Story' }}
          FALLBACK_DESC: Lang=${{ matrix.lang }}, Region=${{ matrix.region }} Auto upload
          YT_PRIVACY: "public"
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
        run: |
          set -euo pipefail
          title="${TITLE:-$FALLBACK_TITLE}"
          desc="${DESC:-$FALLBACK_DESC}"
          tags="${TAGS:-shorts,ai,story}"

          echo "Uploading: $VIDEO_PATH"
          echo "Title: $title"
          echo "Desc: ${desc:0:80}..."

          TITLE="$title" DESC="$desc" TAGS="$tags" python - <<'PY'
          import os, json, pathlib, time, mimetypes
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload
          from google.auth.transport.requests import Request
          from google.oauth2.credentials import Credentials

          vp=pathlib.Path(os.environ["VIDEO_PATH"])
          if not vp.exists(): raise SystemExit("Video not found")

          tags=[t.strip() for t in os.environ.get("TAGS","").split(",") if t.strip()]
          creds=Credentials(None,
            refresh_token=os.environ["YT_REFRESH_TOKEN"],
            client_id=os.environ["YT_CLIENT_ID"],
            client_secret=os.environ["YT_CLIENT_SECRET"],
            token_uri="https://oauth2.googleapis.com/token")
          creds.refresh(Request())
          yt=build("youtube","v3",credentials=creds,cache_discovery=False)

          body={"snippet":{
                  "title":os.environ["TITLE"][:95],
                  "description":os.environ["DESC"][:4900],
                  "categoryId":"22",
                  **({"tags":tags} if tags else {})},
                "status":{"privacyStatus":os.environ.get("YT_PRIVACY","public")}}
          mime,_=mimetypes.guess_type(str(vp))
          media=MediaFileUpload(str(vp),mimetype=mime or "video/mp4",chunksize=1024*1024,resumable=True)
          req=yt.videos().insert(part="snippet,status",body=body,media_body=media)
          resp=None;last=-1;start=time.monotonic()
          while resp is None:
            status,resp=req.next_chunk()
            if status and hasattr(status,"progress"):
              try:pct=int(float(status.progress())*100); 
              except:pct=None
              if pct!=last: print(f"[upload]{pct}%"); last=pct
            if time.monotonic()-start>1800: raise RuntimeError("Timeout")
          vid=(resp or {}).get("id")
          print("Uploaded:","https://youtu.be/"+vid if vid else "(no id)")
          pathlib.Path("out/youtube_response.json").write_text(json.dumps(resp or {},indent=2),encoding="utf-8")
          PY

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: output-story-${{ matrix.lang }}
          path: out/**
          if-no-files-found: warn
          retention-days: 7

name: yt-auto-story

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */8 * * *"  # UTC; günde 3 kez

jobs:
  publish-story:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    concurrency:
      group: yt-auto-${{ github.workflow }}-${{ matrix.lang }}
      cancel-in-progress: true

    strategy:
      fail-fast: false
      matrix:
        include:
          - lang: en
            region: US
            title_prefix: "Mystery Story:"
          - lang: tr
            region: TR
            title_prefix: "Gizemli Hikaye:"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install system deps (ffmpeg & fonts)
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg fonts-dejavu-core

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Preflight (keys)
        id: gates
        env:
          OPENAI_API_KEY_S: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_KEY_V: ${{ vars.OPENAI_API_KEY }}
          YT_CLIENT_ID_S: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET_S: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN_S: ${{ secrets.YT_REFRESH_TOKEN }}
        run: |
          set -euo pipefail
          if [ -z "${OPENAI_API_KEY_S}${OPENAI_API_KEY_V}" ]; then
            echo "::warning::OPENAI_API_KEY yok; TTS sessiz moda düşebilir"
          fi
          has_yt=false
          if [ -n "${YT_CLIENT_ID_S:-}" ] && [ -n "${YT_CLIENT_SECRET_S:-}" ] && [ -n "${YT_REFRESH_TOKEN_S:-}" ]; then
            has_yt=true
          else
            echo "::warning::YouTube secret'larından biri eksik; upload atlanacak"
          fi
          echo "has_yt=${has_yt}" >> "$GITHUB_OUTPUT"

      - name: Build video (STORY • ${{ matrix.lang }})
        id: build
        env:
          THEME: "story"
          LANGUAGE: ${{ matrix.lang }}
          REGION: ${{ matrix.region }}
          VIDEO_TITLE_PREFIX: ${{ matrix.title_prefix }}

          # OPENAI anahtarı (secret varsa onu, yoksa vars)
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY != '' && secrets.OPENAI_API_KEY || vars.OPENAI_API_KEY }}
          OPENAI_BASE_URL: "https://api.openai.com/v1"
          OPENAI_MODEL_CHAT: "gpt-4o-mini"
          OPENAI_MODEL_TTS:  "gpt-4o-mini-tts"
          OPENAI_MAX_TOKENS: "400"
          OPENAI_TEMPERATURE: "0.7"

          TTS_VOICE: "alloy"
          TTS_ATEMPO: "1.07"
          TTS_BITRATE: "128k"

          BG_IMAGES_PER_SLIDE: "4"
          FPS: "60"
          CRF: "22"
          ALLOW_NET_BG: "0"
          NET_TIMEOUT: "20"
          MAX_BG_SIZE_MB: "8"

          BREAKING_ON: "0"
          BREAKING_TEXT: "BREAKING"
          PRESENTER_URL: ""
          PRESENTER_POS: "top-right"
          PRESENTER_SIZE: "260"
          PRESENTER_INITIALS: "AI"

          HF_TOKEN: ${{ secrets.HF_TOKEN != '' && secrets.HF_TOKEN || vars.HF_TOKEN }}

          PYTHONIOENCODING: "utf-8"
          LANG: "en_US.UTF-8"
          PYTHONFAULTHANDLER: "1"
        run: |
          set -euo pipefail
          mkdir -p out
          echo "== RUN =="
          python -X dev -u -m src.main 2>&1 | tee "out/run_${{ matrix.lang }}.log" || true
          echo "== OUT =="
          ls -lah out || true
          latest="$(ls -t out/*.mp4 2>/dev/null | head -n1 || true)"
          if [ -z "$latest" ]; then
            echo "::error::Hiç .mp4 üretilmemiş görünüyor (out/*.mp4 bulunamadı)"; exit 1
          fi
          echo "video_path=$latest" >> "$GITHUB_OUTPUT"

      # >>> ÖNEMLİ: Scope uyuşmazlığı (invalid_scope) yaşamamak için youtube_upload.py içindeki
      # _configured_scopes() ile aynı mantığı kullanıyoruz. Eğer refresh token yalnızca upload ile
      # alınmışsa, readonly denemiyoruz.
      - name: Auth smoke test (YouTube)
        if: ${{ steps.gates.outputs.has_yt == 'true' }}
        env:
          YT_CLIENT_ID:     ${{ secrets.YT_CLIENT_ID != '' && secrets.YT_CLIENT_ID || vars.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET != '' && secrets.YT_CLIENT_SECRET || vars.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN != '' && secrets.YT_REFRESH_TOKEN || vars.YT_REFRESH_TOKEN }}
          # İsteğe bağlı: Actions Variables kısmına YT_SCOPES eklersen buradan okunur
          # Örn: "https://www.googleapis.com/auth/youtube.upload"
          YT_SCOPES:        ${{ vars.YT_SCOPES }}
        run: |
          python - << 'PY'
          import os, json
          import google.auth.transport.requests
          from googleapiclient.discovery import build
          from youtube_upload import _configured_scopes, _creds

          try:
              creds = _creds()
              print("Refresh OK. Scopes:", json.dumps(_configured_scopes()))
              # Yalnızca 'youtube.readonly' IZNI varsa kanalı sorgula (ekstra doğrulama)
              scopes = set(_configured_scopes())
              if "https://www.googleapis.com/auth/youtube.readonly" in scopes:
                  yt = build("youtube","v3",credentials=creds)
                  me = yt.channels().list(part="snippet", mine=True).execute()
                  print("Channel:", me["items"][0]["snippet"]["title"])
          except Exception as e:
              print("YouTube OAuth refresh FAILED:", e)
              raise
          PY

      - name: Upload to YouTube (${{ matrix.lang }})
        if: ${{ steps.gates.outputs.has_yt == 'true' }}
        env:
          YT_CLIENT_ID:     ${{ secrets.YT_CLIENT_ID != '' && secrets.YT_CLIENT_ID || vars.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET != '' && secrets.YT_CLIENT_SECRET || vars.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN != '' && secrets.YT_REFRESH_TOKEN || vars.YT_REFRESH_TOKEN }}
          YT_PRIVACY: "public"
          YT_MADE_FOR_KIDS: "false"
          YT_DEBUG: "1"
          YT_TAGS: "shorts,ai,story"
          # İsteğe bağlı: yalnızca upload scope'uyla alındıysa şunu bir Actions Variable olarak ekleyebilirsin:
          # YT_SCOPES = https://www.googleapis.com/auth/youtube.upload
          YT_SCOPES: ${{ vars.YT_SCOPES }}
        run: |
          set -euo pipefail
          VIDEO_PATH="${{ steps.build.outputs.video_path }}"
          echo "Yüklenecek dosya: $VIDEO_PATH"
          python youtube_upload.py \
            --video "$VIDEO_PATH" \
            --title "${{ matrix.title_prefix }} ${{ matrix.lang == 'tr' && 'Günlük Otomatik Hikaye' || 'Daily Auto Story' }}" \
            --desc  "Lang=${{ matrix.lang }}, Region=${{ matrix.region }} • Otomasyon yüklemesi" \
            --privacy "${{ env.YT_PRIVACY }}"

      - name: Upload artifact (${{ matrix.lang }})
        uses: actions/upload-artifact@v4
        with:
          name: output-story-${{ matrix.lang }}
          path: |
            out/**
          if-no-files-found: warn
          retention-days: 7
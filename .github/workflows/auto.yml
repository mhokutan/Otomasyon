name: yt-auto-story

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */8 * * *"

jobs:
  publish-story:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        include:
          - lang: en
            region: US
            title_prefix: "Mystery Story:"
          - lang: tr
            region: TR
            title_prefix: "Gizemli Hikaye:"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install system deps (ffmpeg & fonts)
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg fonts-dejavu-core

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Preflight (keys)
        id: gates
        env:
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
        run: |
          set -euo pipefail
          has_yt=false
          if [ -n "${YT_CLIENT_ID:-}" ] && [ -n "${YT_CLIENT_SECRET:-}" ] && [ -n "${YT_REFRESH_TOKEN:-}" ]; then
            has_yt=true
          else
            echo "::warning::YouTube secret'larından biri eksik; upload atlanacak"
          fi
          echo "has_yt=$has_yt" >> "$GITHUB_OUTPUT"

      - name: Build video (STORY • ${{ matrix.lang }})
        id: build
        run: |
          set -euo pipefail
          mkdir -p out
          echo "== RUN =="
          python -X dev -u -m src.main 2>&1 | tee "out/run_${{ matrix.lang }}.log" || true
          echo "== OUT =="
          ls -lah out || true
          latest="$(ls -t out/*.mp4 2>/dev/null | head -n1 || true)"
          if [ -z "$latest" ]; then
            echo "::error::Hiç .mp4 üretilmemiş görünüyor"; exit 1
          fi
          echo "video_path=$latest" >> "$GITHUB_OUTPUT"

      - name: Auth smoke test (YouTube)
        if: ${{ steps.gates.outputs.has_yt == 'true' }}
        env:
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
        run: |
          python - << 'PY'
          import os, sys
          import google.auth.transport.requests
          from google.oauth2.credentials import Credentials
          from google.auth.exceptions import RefreshError

          try:
              # Burada scope vermiyoruz; refresh token hangi kapsamla alındıysa onunla yenilenecek.
              creds = Credentials(
                  None,
                  refresh_token=os.environ["YT_REFRESH_TOKEN"],
                  client_id=os.environ["YT_CLIENT_ID"],
                  client_secret=os.environ["YT_CLIENT_SECRET"],
                  token_uri="https://oauth2.googleapis.com/token",
              )
              creds.refresh(google.auth.transport.requests.Request())
              print("Refresh OK")
          except RefreshError as e:
              print(f"::error::YouTube OAuth refresh başarısız: {e}")
              print("İpucu: Refresh token'ı doğru kapsam(lar)la (tercihen sadece https://www.googleapis.com/auth/youtube.upload) yeniden üret.")
              sys.exit(1)
          PY

      - name: Upload to YouTube (${{ matrix.lang }})
        if: ${{ steps.gates.outputs.has_yt == 'true' }}
        env:
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
          YT_PRIVACY: "public"
          YT_MADE_FOR_KIDS: "false"
        run: |
          set -euo pipefail
          VIDEO_PATH="${{ steps.build.outputs.video_path }}"
          TITLE="${{ matrix.title_prefix }} ${{ matrix.lang == 'tr' && 'Günlük Otomatik Hikaye' || 'Daily Auto Story' }}"
          DESC="Lang=${{ matrix.lang }}, Region=${{ matrix.region }} • Otomasyon yüklemesi"

          python - << 'PY'
          import os, sys, time, json, mimetypes, pathlib
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload
          from google.auth.transport.requests import Request
          from google.oauth2.credentials import Credentials
          from googleapiclient.errors import HttpError

          video_path = os.environ.get("VIDEO_PATH")
          title      = os.environ.get("TITLE","")
          desc       = os.environ.get("DESC","")
          privacy    = os.environ.get("YT_PRIVACY","public")
          made_for_kids = os.environ.get("YT_MADE_FOR_KIDS","false").lower() in ("1","true","yes","on")

          # Env'den runner'a aktar
          video_path = video_path or "${{ steps.build.outputs.video_path }}"
          title = title or "${{ matrix.title_prefix }} ${{ matrix.lang == 'tr' and 'Günlük Otomatik Hikaye' or 'Daily Auto Story' }}"
          desc  = desc  or "Lang=${{ matrix.lang }}, Region=${{ matrix.region }} • Otomasyon yüklemesi"

          vp = pathlib.Path(video_path)
          if not vp.exists() or vp.stat().st_size <= 0:
              print(f"::error::Video yok ya da boş: {video_path}")
              sys.exit(1)

          # Refresh token ile access token al — scope belirtmiyoruz (invalid_scope riskini azaltır)
          creds = Credentials(
              None,
              refresh_token=os.environ["YT_REFRESH_TOKEN"],
              client_id=os.environ["YT_CLIENT_ID"],
              client_secret=os.environ["YT_CLIENT_SECRET"],
              token_uri="https://oauth2.googleapis.com/token",
          )
          creds.refresh(Request())
          youtube = build("youtube", "v3", credentials=creds)

          body = {
              "snippet": {
                  "title": (title or "")[:95],
                  "description": (desc or "")[:4900],
                  "categoryId": "22",
              },
              "status": {
                  "privacyStatus": privacy if privacy in {"public","private","unlisted"} else "unlisted",
                  "selfDeclaredMadeForKids": made_for_kids,
              }
          }

          mimetype, _ = mimetypes.guess_type(str(vp))
          media = MediaFileUpload(str(vp), mimetype=mimetype or "video/mp4", chunksize=1024*1024, resumable=True)

          try:
              req = youtube.videos().insert(part="snippet,status", body=body, media_body=media)
              response = None
              last_pct = -1
              start = time.monotonic()
              while response is None:
                  status, response = req.next_chunk()
                  if status and hasattr(status, "progress"):
                      try:
                          p = int(float(status.progress())*100)
                          if p != last_pct:
                              print(f"[upload] {p}%")
                              last_pct = p
                      except Exception:
                          pass
                  # basit bir toplam süre guard'ı (opsiyonel)
                  if time.monotonic() - start > 1800:
                      raise RuntimeError("Upload timed out (30m)")

              if not response or "id" not in response:
                  print("::warning::Yanıt içinde video id yok, yükleme başarısını doğrulayamadım.")
                  print(json.dumps(response or {}, ensure_ascii=False, indent=2))
                  sys.exit(0)

              vid = response["id"]
              url = f"https://youtu.be/{vid}"
              print(f"[upload] tamamlandı: {url}")

          except HttpError as e:
              print(f"::error::YouTube API hatası: {e}")
              sys.exit(1)
          except Exception as e:
              print(f"::error::{e}")
              sys.exit(1)
          PY
        env:
          VIDEO_PATH: ${{ steps.build.outputs.video_path }}
          TITLE: "${{ matrix.title_prefix }} ${{ matrix.lang == 'tr' && 'Günlük Otomatik Hikaye' || 'Daily Auto Story' }}"
          DESC: "Lang=${{ matrix.lang }}, Region=${{ matrix.region }} • Otomasyon yüklemesi"

      - name: Upload artifact (${{ matrix.lang }})
        uses: actions/upload-artifact@v4
        with:
          name: output-story-${{ matrix.lang }}
          path: out/**
          if-no-files-found: warn
          retention-days: 7
name: yt-auto-story

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */8 * * *"  # UTC; günde 3 kez

jobs:
  publish-story:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    concurrency:
      group: yt-auto-${{ github.workflow }}-${{ matrix.lang }}
      cancel-in-progress: true

    strategy:
      fail-fast: false
      matrix:
        include:
          - lang: en
            region: US
            title_prefix: "Mystery Story:"
          - lang: tr
            region: TR
            title_prefix: "Gizemli Hikaye:"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install system deps (ffmpeg & fonts)
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg fonts-dejavu-core

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Preflight (keys)
        env:
          OPENAI_API_KEY_S: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_KEY_V: ${{ vars.OPENAI_API_KEY }}
          YT_CLIENT_ID_S: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET_S: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN_S: ${{ secrets.YT_REFRESH_TOKEN }}
        run: |
          set -euo pipefail
          if [ -z "${OPENAI_API_KEY_S}${OPENAI_API_KEY_V}" ]; then
            echo "::warning::OPENAI_API_KEY yok; TTS sessiz moda düşecek"
          fi
          missing=0
          for k in YT_CLIENT_ID_S YT_CLIENT_SECRET_S YT_REFRESH_TOKEN_S; do
            if [ -z "${!k}" ]; then
              echo "::warning::${k%_S} yok; YouTube yüklemesi atlanacak"
              missing=1
            fi
          done
          if [ "$missing" -eq 1 ]; then
            echo "Yükleme için sonraki adımda atlama yapılabilir."
          fi
          echo "Preflight OK"

      - name: Build video (STORY • ${{ matrix.lang }})
        env:
          THEME: "story"
          LANGUAGE: ${{ matrix.lang }}
          REGION: ${{ matrix.region }}
          VIDEO_TITLE_PREFIX: ${{ matrix.title_prefix }}

          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY != '' && secrets.OPENAI_API_KEY || vars.OPENAI_API_KEY }}
          OPENAI_BASE_URL: "https://api.openai.com/v1"
          OPENAI_MODEL_CHAT: "gpt-4o-mini"
          OPENAI_MODEL_TTS:  "gpt-4o-mini-tts"
          OPENAI_MAX_TOKENS: "400"
          OPENAI_TEMPERATURE: "0.7"

          TTS_VOICE: "alloy"
          TTS_ATEMPO: "1.07"
          TTS_BITRATE: "128k"

          BG_IMAGES_PER_SLIDE: "4"
          FPS: "60"
          CRF: "22"
          ALLOW_NET_BG: "0"
          NET_TIMEOUT: "20"
          MAX_BG_SIZE_MB: "8"

          BREAKING_ON: "0"
          BREAKING_TEXT: "BREAKING"
          PRESENTER_URL: ""
          PRESENTER_POS: "top-right"
          PRESENTER_SIZE: "260"
          PRESENTER_INITIALS: "AI"

          HF_TOKEN: ${{ secrets.HF_TOKEN != '' && secrets.HF_TOKEN || vars.HF_TOKEN }}

          PYTHONIOENCODING: "utf-8"
          LANG: "en_US.UTF-8"
          PYTHONFAULTHANDLER: "1"
        run: |
          set -euo pipefail
          mkdir -p out
          rm -f out/*.mp4 || true
          echo "== RUN =="
          # HATA OLURSA JOB FAIL ETSİN (|| true YOK!)
          python -X dev -u -m src.main 2>&1 | tee "out/run_${{ matrix.lang }}.log"
          echo "== OUT =="
          ls -lah out
          # Genel isim: final_${lang}.mp4 varsayımı; gerekirse src.main'e göre değiştir
          test -f "out/final_${{ matrix.lang }}.mp4" || (echo "::error::Video çıktısı bulunamadı"; exit 1)

      - name: Auth smoke test (YouTube)
        if: ${{ secrets.YT_CLIENT_ID != '' && secrets.YT_CLIENT_SECRET != '' && secrets.YT_REFRESH_TOKEN != '' }}
        env:
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID != '' && secrets.YT_CLIENT_ID || vars.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET != '' && secrets.YT_CLIENT_SECRET || vars.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN != '' && secrets.YT_REFRESH_TOKEN || vars.YT_REFRESH_TOKEN }}
        run: |
          python - << 'PY'
          import os, google.auth.transport.requests
          from google.oauth2.credentials import Credentials
          from googleapiclient.discovery import build
          creds = Credentials(
              None,
              refresh_token=os.environ["YT_REFRESH_TOKEN"],
              client_id=os.environ["YT_CLIENT_ID"],
              client_secret=os.environ["YT_CLIENT_SECRET"],
              token_uri="https://oauth2.googleapis.com/token",
              scopes=["https://www.googleapis.com/auth/youtube.readonly"]
          )
          creds.refresh(google.auth.transport.requests.Request())
          yt = build("youtube","v3",credentials=creds)
          me = yt.channels().list(part="snippet", mine=True).execute()
          print("OK channel:", me["items"][0]["snippet"]["title"])
          PY

      - name: Upload to YouTube (${{ matrix.lang }})
        if: ${{ secrets.YT_CLIENT_ID != '' && secrets.YT_CLIENT_SECRET != '' && secrets.YT_REFRESH_TOKEN != '' }}
        env:
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID != '' && secrets.YT_CLIENT_ID || vars.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET != '' && secrets.YT_CLIENT_SECRET || vars.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN != '' && secrets.YT_REFRESH_TOKEN || vars.YT_REFRESH_TOKEN }}
          YT_PRIVACY: "public"
          YT_MADE_FOR_KIDS: "false"
          VIDEO_PATH: out/final_${{ matrix.lang }}.mp4
          VIDEO_TITLE: "${{ matrix.title_prefix }} ${{ matrix.lang == 'tr' && 'Günlük Otomatik Hikaye' || 'Daily Auto Story' }}"
          VIDEO_DESC: "Generated automatically. Lang=${{ matrix.lang }}, Region=${{ matrix.region }}"
        run: |
          set -euo pipefail
          ls -lh "$VIDEO_PATH"
          python - << 'PY'
          import os, google.auth.transport.requests, sys
          from google.oauth2.credentials import Credentials
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload
          path = os.environ["VIDEO_PATH"]
          if not os.path.exists(path):
              print("Video bulunamadı:", path, file=sys.stderr); sys.exit(1)
          creds = Credentials(
              None,
              refresh_token=os.environ["YT_REFRESH_TOKEN"],
              client_id=os.environ["YT_CLIENT_ID"],
              client_secret=os.environ["YT_CLIENT_SECRET"],
              token_uri="https://oauth2.googleapis.com/token",
              scopes=["https://www.googleapis.com/auth/youtube.upload"]
          )
          creds.refresh(google.auth.transport.requests.Request())
          yt = build("youtube","v3",credentials=creds)
          body = {
            "snippet": {
              "title": os.environ["VIDEO_TITLE"],
              "description": os.environ["VIDEO_DESC"],
              "tags": ["shorts","ai","story"]
            },
            "status": {
              "privacyStatus": os.environ.get("YT_PRIVACY","public"),
              "selfDeclaredMadeForKids": os.environ.get("YT_MADE_FOR_KIDS","false").lower()=="true"
            }
          }
          media = MediaFileUpload(path, mimetype="video/mp4", chunksize=8*1024*1024, resumable=True)
          req = yt.videos().insert(part="snippet,status", body=body, media_body=media)
          resp = None
          while resp is None:
              status, resp = req.next_chunk()
              if status: print(f"Upload progress: {int(status.progress()*100)}%")
          print("Uploaded videoId:", resp["id"])
          PY

      - name: Upload artifact (${{ matrix.lang }})
        uses: actions/upload-artifact@v4
        with:
          name: output-story-${{ matrix.lang }}
          path: out/**
          if-no-files-found: warn
          retention-days: 7

name: yt-auto

on:
  workflow_dispatch:
  schedule:
    # New York 07:00 (EDT ≈ UTC 11:00)
    - cron: "0 11 * * *"
    # New York 19:00 (EDT ≈ UTC 23:00)
    - cron: "0 23 * * *"

concurrency:
  group: yt-auto
  cancel-in-progress: false

jobs:
  morning-crypto:
    if: github.event_name == 'workflow_dispatch' || github.event.schedule == '0 11 * * *'
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install system deps (ffmpeg & fonts)
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg fonts-dejavu-core

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Preflight – required secrets/vars present?
        env:
          OPENAI_API_KEY_S: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_KEY_V: ${{ vars.OPENAI_API_KEY }}
          YT_CLIENT_ID_S: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET_S: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN_S: ${{ secrets.YT_REFRESH_TOKEN }}
        run: |
          set -e
          if [ -z "${OPENAI_API_KEY_S}${OPENAI_API_KEY_V}" ]; then
            echo "::error::Missing OPENAI_API_KEY (Secrets or Variables)"
            exit 1
          fi
          for k in YT_CLIENT_ID_S YT_CLIENT_SECRET_S YT_REFRESH_TOKEN_S; do
            if [ -z "${!k}" ]; then
              echo "::error::Missing YouTube secret: ${k%_S}"
              exit 1
            fi
          done
          echo "Creds OK ✅"

      - name: Run generator (CRYPTO morning EN)
        env:
          # --- Content selection ---
          THEME: "crypto"
          CRYPTO_COINS: "bitcoin,ethereum,solana"
          VIDEO_TITLE_PREFIX: "Daily Crypto Brief:"
          LANGUAGE: "en"
          REGION: "US"

          # --- OpenAI (cheap models) ---
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY != '' && secrets.OPENAI_API_KEY || vars.OPENAI_API_KEY }}
          OPENAI_BASE_URL: "https://api.openai.com/v1"
          OPENAI_MODEL_CHAT: "gpt-4o-mini"
          OPENAI_MODEL_TTS:  "gpt-4o-mini-tts"
          OPENAI_MAX_TOKENS: "400"
          OPENAI_TEMPERATURE: "0.7"

          # --- TTS tuning (no gap_ms) ---
          TTS_VOICE: "alloy"
          TTS_ATEMPO: "1.07"
          TTS_BITRATE: "128k"

          # --- Visuals / render ---
          BG_IMAGES_PER_SLIDE: "5"
          FPS: "60"
          CRF: "22"

          # Breaking banner
          BREAKING_ON: "1"
          BREAKING_TEXT: "BREAKING NEWS"

          # Presenter avatar (optional URL, else initials used)
          PRESENTER_URL: ""
          PRESENTER_POS: "top-right"   # top-left | top-right | bottom-left | bottom-right
          PRESENTER_SIZE: "260"
          PRESENTER_INITIALS: "AI"

          # Optional AI images via HuggingFace (optional)
          HF_TOKEN: ${{ secrets.HF_TOKEN != '' && secrets.HF_TOKEN || vars.HF_TOKEN }}

          # YouTube OAuth secrets
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
          YT_PRIVACY: "public"

          PYTHONIOENCODING: "utf-8"
          LANG: "en_US.UTF-8"
        run: |
          set -euxo pipefail
          mkdir -p out
          python src/main.py

      - name: Upload artifact (morning)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: output-morning
          path: out/**
          if-no-files-found: warn
          retention-days: 7

  evening-sports:
    if: github.event_name == 'workflow_dispatch' || github.event.schedule == '0 23 * * *'
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install system deps (ffmpeg & fonts)
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg fonts-dejavu-core

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Preflight – required secrets/vars present?
        env:
          OPENAI_API_KEY_S: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_KEY_V: ${{ vars.OPENAI_API_KEY }}
          YT_CLIENT_ID_S: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET_S: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN_S: ${{ secrets.YT_REFRESH_TOKEN }}
        run: |
          set -e
          if [ -z "${OPENAI_API_KEY_S}${OPENAI_API_KEY_V}" ]; then
            echo "::error::Missing OPENAI_API_KEY (Secrets or Variables)"
            exit 1
          fi
          for k in YT_CLIENT_ID_S YT_CLIENT_SECRET_S YT_REFRESH_TOKEN_S; do
            if [ -z "${!k}" ]; then
              echo "::error::Missing YouTube secret: ${k%_S}"
              exit 1
            fi
          done
          echo "Creds OK ✅"

      - name: Run generator (SPORTS evening EN)
        env:
          # --- Content selection (sports via RSS) ---
          THEME: "news"
          RSS_URL: "https://news.google.com/rss?hl=en-US&gl=US&ceid=US:en&q=sports"
          VIDEO_TITLE_PREFIX: "Sports Brief:"
          LANGUAGE: "en"
          REGION: "US"

          # --- OpenAI (cheap models) ---
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY != '' && secrets.OPENAI_API_KEY || vars.OPENAI_API_KEY }}
          OPENAI_BASE_URL: "https://api.openai.com/v1"
          OPENAI_MODEL_CHAT: "gpt-4o-mini"
          OPENAI_MODEL_TTS:  "gpt-4o-mini-tts"
          OPENAI_MAX_TOKENS: "400"
          OPENAI_TEMPERATURE: "0.7"

          # --- TTS tuning ---
          TTS_VOICE: "alloy"
          TTS_ATEMPO: "1.07"
          TTS_BITRATE: "128k"

          # --- Visuals / render ---
          BG_IMAGES_PER_SLIDE: "5"
          FPS: "60"
          CRF: "22"

          # Breaking banner
          BREAKING_ON: "1"
          BREAKING_TEXT: "BREAKING NEWS"

          # Presenter avatar (optional)
          PRESENTER_URL: ""
          PRESENTER_POS: "top-right"
          PRESENTER_SIZE: "260"
          PRESENTER_INITIALS: "AI"

          HF_TOKEN: ${{ secrets.HF_TOKEN != '' && secrets.HF_TOKEN || vars.HF_TOKEN }}

          # YouTube OAuth
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
          YT_PRIVACY: "public"

          PYTHONIOENCODING: "utf-8"
          LANG: "en_US.UTF-8"
        run: |
          set -euxo pipefail
          mkdir -p out
          python src/main.py

      - name: Upload artifact (evening)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: output-evening
          path: out/**
          if-no-files-found: warn
          retention-days: 7

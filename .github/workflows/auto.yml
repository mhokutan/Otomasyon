name: yt-auto-story

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */8 * * *"  # Günde 3 kez (UTC 00:00, 08:00, 16:00)

jobs:
  publish-story:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    concurrency:
      group: yt-auto-${{ github.workflow }}-${{ matrix.lang }}
      cancel-in-progress: true

    strategy:
      fail-fast: false
      matrix:
        include:
          - lang: en
            region: US
            title_prefix: "Mystery Story:"
          - lang: tr
            region: TR
            title_prefix: "Gizemli Hikaye:"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install system deps (ffmpeg & fonts)
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg fonts-dejavu-core

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Preflight – required secrets/vars present?
        env:
          OPENAI_API_KEY_S: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_KEY_V: ${{ vars.OPENAI_API_KEY }}
          YT_CLIENT_ID_S: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET_S: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN_S: ${{ secrets.YT_REFRESH_TOKEN }}
        run: |
          set -e
          if [ -z "${OPENAI_API_KEY_S}${OPENAI_API_KEY_V}" ]; then
            echo "::warning::OPENAI_API_KEY yok; TTS sessiz moda düşecek"
          fi
          for k in YT_CLIENT_ID_S YT_CLIENT_SECRET_S YT_REFRESH_TOKEN_S; do
            if [ -z "${!k}" ]; then
              echo "::warning::${k%_S} yok; YouTube yüklemesi atlanacak"
            fi
          done
          echo "Preflight OK"

      - name: Run generator (STORY • ${{ matrix.lang }})
        env:
          THEME: "story"
          LANGUAGE: ${{ matrix.lang }}
          REGION: ${{ matrix.region }}
          VIDEO_TITLE_PREFIX: ${{ matrix.title_prefix }}

          # OpenAI (varsa)
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY != '' && secrets.OPENAI_API_KEY || vars.OPENAI_API_KEY }}
          OPENAI_BASE_URL: "https://api.openai.com/v1"
          OPENAI_MODEL_CHAT: "gpt-4o-mini"
          OPENAI_MODEL_TTS:  "gpt-4o-mini-tts"
          OPENAI_MAX_TOKENS: "400"
          OPENAI_TEMPERATURE: "0.7"

          # TTS
          TTS_VOICE: "alloy"
          TTS_ATEMPO: "1.07"
          TTS_BITRATE: "128k"

          # Render
          BG_IMAGES_PER_SLIDE: "4"
          FPS: "60"
          CRF: "22"
          ALLOW_NET_BG: "0"        # ağ kaynaklı görselleri kapat → daha stabil
          NET_TIMEOUT: "20"
          MAX_BG_SIZE_MB: "8"

          # Banner & Presenter (opsiyonel)
          BREAKING_ON: "0"
          BREAKING_TEXT: "BREAKING"
          PRESENTER_URL: ""
          PRESENTER_POS: "top-right"
          PRESENTER_SIZE: "260"
          PRESENTER_INITIALS: "AI"

          # HF (opsiyonel)
          HF_TOKEN: ${{ secrets.HF_TOKEN != '' && secrets.HF_TOKEN || vars.HF_TOKEN }}

          # YouTube (opsiyonel)
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
          YT_PRIVACY: "public"
          YT_MADE_FOR_KIDS: "false"

          PYTHONIOENCODING: "utf-8"
          LANG: "en_US.UTF-8"
          PYTHONFAULTHANDLER: "1"
        run: |
          set -euo pipefail
          mkdir -p out

          echo "== ENV ÖZET =="
          echo "PWD: $(pwd)"
          echo "Python: $(python --version)"
          echo "ffmpeg: $(ffmpeg -version | head -n1)"
          echo "OPENAI_API_KEY len: ${#OPENAI_API_KEY}"

          echo "== ÇALIŞTIRMA =="
          # Python hata verirse bile log dosyası oluşsun, step düşmesin:
          python -X dev -u -m src.main 2>&1 | tee "out/run_${{ matrix.lang }}.log" || true

          echo "== OUT İÇERİĞİ =="
          ls -lah out || true

      - name: Upload artifact (${{ matrix.lang }})
        uses: actions/upload-artifact@v4
        with:
          name: output-story-${{ matrix.lang }}
          path: out/**
          if-no-files-found: warn
          retention-days: 7
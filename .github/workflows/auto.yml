name: yt-auto

on:
  workflow_dispatch:
  schedule:
    # New York 07:00 (EDT ≈ UTC 11:00)
    - cron: "0 11 * * *"
    # New York 19:00 (EDT ≈ UTC 23:00)
    - cron: "0 23 * * *"

concurrency:
  group: yt-auto
  cancel-in-progress: false

jobs:
  morning-crypto:
    if: github.event_name == 'workflow_dispatch' || github.event.schedule == '0 11 * * *'
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install system deps (ffmpeg & fonts)
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg fonts-dejavu-core

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Preflight – required secrets/vars present?
        env:
          # secrets + vars (fallback)
          OPENAI_API_KEY_S: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_KEY_V: ${{ vars.OPENAI_API_KEY }}
          YT_CLIENT_ID_S: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET_S: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN_S: ${{ secrets.YT_REFRESH_TOKEN }}
        run: |
          set -e
          # OPENAI from secret or var
          if [ -z "${OPENAI_API_KEY_S}${OPENAI_API_KEY_V}" ]; then
            echo "::error::Missing OPENAI_API_KEY (neither 'Secrets' nor 'Variables' set)"
            exit 1
          fi
          # YouTube must be in secrets
          for k in YT_CLIENT_ID_S YT_CLIENT_SECRET_S YT_REFRESH_TOKEN_S; do
            if [ -z "${!k}" ]; then
              echo "::error::Missing required YouTube secret: ${k%_S}"
              exit 1
            fi
          done
          if [ -n "${OPENAI_API_KEY_S}" ]; then
            echo "OPENAI_API_KEY source: Secrets ✅"
          else
            echo "OPENAI_API_KEY source: Variables ⚠️ (move to Secrets when mümkün)"
          fi
          echo "All required credentials are present ✅"

      - name: Run generator (CRYPTO morning EN)
        env:
          THEME: "crypto"
          CRYPTO_COINS: "bitcoin,ethereum,solana"
          VIDEO_TITLE_PREFIX: "Daily Crypto Brief:"
          LANGUAGE: "en"
          REGION: "US"

          # Audio/visual tuning
          TTS_VOICE: "alloy"
          TTS_ATEMPO: "1.60"
          TTS_GAP_MS: "10"
          TTS_BITRATE: "128k"
          BG_ZOOM_PER_SEC: "0.0018"
          XFADE_SEC: "1.0"
          TICKER_SPEED: "170"
          TICKER_H: "120"
          FPS: "60"

          # Optional AI images (Hugging Face)
          HF_TOKEN: ${{ secrets.HF_TOKEN || vars.HF_TOKEN }}

          # YouTube OAuth (secrets)
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
          YT_PRIVACY: "public"

          # OpenAI TTS (secret or var fallback)
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || vars.OPENAI_API_KEY }}

          PYTHONIOENCODING: "utf-8"
          LANG: "en_US.UTF-8"
        run: |
          set -euxo pipefail
          python src/main.py

      - name: Upload artifact (morning)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: output-morning
          path: out/**
          if-no-files-found: warn
          retention-days: 7

  evening-sports:
    if: github.event_name == 'workflow_dispatch' || github.event.schedule == '0 23 * * *'
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install system deps (ffmpeg & fonts)
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg fonts-dejavu-core

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Preflight – required secrets/vars present?
        env:
          OPENAI_API_KEY_S: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_KEY_V: ${{ vars.OPENAI_API_KEY }}
          YT_CLIENT_ID_S: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET_S: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN_S: ${{ secrets.YT_REFRESH_TOKEN }}
        run: |
          set -e
          if [ -z "${OPENAI_API_KEY_S}${OPENAI_API_KEY_V}" ]; then
            echo "::error::Missing OPENAI_API_KEY (neither 'Secrets' nor 'Variables' set)"
            exit 1
          fi
          for k in YT_CLIENT_ID_S YT_CLIENT_SECRET_S YT_REFRESH_TOKEN_S; do
            if [ -z "${!k}" ]; then
              echo "::error::Missing required YouTube secret: ${k%_S}"
              exit 1
            fi
          done
          if [ -n "${OPENAI_API_KEY_S}" ]; then
            echo "OPENAI_API_KEY source: Secrets ✅"
          else
            echo "OPENAI_API_KEY source: Variables ⚠️ (move to Secrets when mümkün)"
          fi
          echo "All required credentials are present ✅"

      - name: Run generator (SPORTS evening EN)
        env:
          THEME: "news"  # sports via RSS
          RSS_URL: "https://news.google.com/rss?hl=en-US&gl=US&ceid=US:en&q=sports"
          VIDEO_TITLE_PREFIX: "Sports Brief:"
          LANGUAGE: "en"
          REGION: "US"

          # Audio/visual tuning
          TTS_VOICE: "alloy"
          TTS_ATEMPO: "1.60"
          TTS_GAP_MS: "10"
          TTS_BITRATE: "128k"
          BG_ZOOM_PER_SEC: "0.0018"
          XFADE_SEC: "1.0"
          TICKER_SPEED: "180"
          TICKER_H: "120"
          FPS: "60"

          HF_TOKEN: ${{ secrets.HF_TOKEN || vars.HF_TOKEN }}

          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
          YT_PRIVACY: "public"

          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || vars.OPENAI_API_KEY }}

          PYTHONIOENCODING: "utf-8"
          LANG: "en_US.UTF-8"
        run: |
          set -euxo pipefail
          python src/main.py

      - name: Upload artifact (evening)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: output-evening
          path: out/**
          if-no-files-found: warn
          retention-days: 7
